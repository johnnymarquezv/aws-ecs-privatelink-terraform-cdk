name: Build and Deploy Microservice

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  GITHUB_REPOSITORY: johnnymarquezv/aws-ecs-privatelink-terraform-cdk
  CONTAINER_REGISTRY: ghcr.io

jobs:
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      id: trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Check if Trivy SARIF file exists
      id: trivy-file
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.trivy-file.outputs.exists == 'true'
      with:
        sarif_file: 'trivy-results.sarif'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Semgrep SAST
      id: semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python
      continue-on-error: true

    - name: Initialize CodeQL
      id: codeql-init
      uses: github/codeql-action/init@v3
      with:
        languages: python
      continue-on-error: true

    - name: Run CodeQL Analysis
      id: codeql
      uses: github/codeql-action/analyze@v3
      continue-on-error: true

    - name: Run Bandit Python Security Linter
      id: bandit
      run: |
        pip install bandit[toml]
        bandit -r microservice/app/ -f json -o bandit-report.json || echo "Bandit scan completed with issues"
        bandit -r microservice/app/ -f txt || echo "Bandit scan completed with issues"
      continue-on-error: true

    - name: Run Safety for Python dependencies
      id: safety
      run: |
        pip install safety
        safety check --json --output safety-report.json || echo "Safety scan completed with issues"
        safety check || echo "Safety scan completed with issues"
      continue-on-error: true

    - name: Run Checkov for Infrastructure security
      id: checkov
      run: |
        pip install checkov
        echo "Running Checkov on Terraform files..."
        checkov -d . --framework terraform --output sarif --output-file-path checkov-results.sarif --verbose || echo "Terraform scan completed with issues"
        echo "Running Checkov on CloudFormation files..."
        checkov -d . --framework cloudformation --output sarif --output-file-path checkov-cfn-results.sarif --verbose || echo "CloudFormation scan completed with issues"
        echo "Listing generated files:"
        ls -la *.sarif || echo "No SARIF files found"
        
        # Create minimal SARIF files if none were generated
        if [ ! -f "checkov-results.sarif" ] && [ ! -f "checkov-cfn-results.sarif" ]; then
          echo "Creating minimal SARIF file for successful scan..."
          echo '{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkov","version":"2.0.0"}},"results":[]}]}' > checkov-results.sarif
        fi
      continue-on-error: true

    - name: Check if Checkov SARIF file exists
      id: checkov-file
      run: |
        if [ -f "checkov-results.sarif" ] || [ -f "checkov-cfn-results.sarif" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          if [ -f "checkov-results.sarif" ]; then
            echo "terraform_file=checkov-results.sarif" >> $GITHUB_OUTPUT
          fi
          if [ -f "checkov-cfn-results.sarif" ]; then
            echo "cloudformation_file=checkov-cfn-results.sarif" >> $GITHUB_OUTPUT
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Checkov Terraform results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.checkov-file.outputs.terraform_file != ''
      with:
        sarif_file: '${{ steps.checkov-file.outputs.terraform_file }}'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Checkov CloudFormation results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.checkov-file.outputs.cloudformation_file != ''
      with:
        sarif_file: '${{ steps.checkov-file.outputs.cloudformation_file }}'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Security Scan Summary
      if: always()
      run: |
        echo "## Security Scan Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Status | SARIF Uploaded |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|----------------|" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy | ${{ steps.trivy.outcome }} | ${{ steps.trivy-file.outputs.exists }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | ${{ steps.semgrep.outcome }} | No |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ steps.codeql.outcome }} | N/A |" >> $GITHUB_STEP_SUMMARY
        echo "| Bandit | ${{ steps.bandit.outcome }} | No |" >> $GITHUB_STEP_SUMMARY
        echo "| Safety | ${{ steps.safety.outcome }} | No |" >> $GITHUB_STEP_SUMMARY
        echo "| Checkov | ${{ steps.checkov.outcome }} | ${{ steps.checkov-file.outputs.exists }} |" >> $GITHUB_STEP_SUMMARY

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.CONTAINER_REGISTRY }}/${{ env.GITHUB_REPOSITORY }}/microservice
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=dev,enable={{is_default_branch}}
          type=raw,value=staging,enable={{is_default_branch}}
          type=raw,value=prod,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./microservice
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "Image pushed with tags:"
        echo "${{ steps.meta.outputs.tags }}"

  deploy-dev-provider:
    name: Deploy Provider to Development
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROVIDER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROVIDER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Provider Infrastructure (Dev)
      run: |
        cd cdk-provider-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=dev --require-approval never

  deploy-dev-consumer:
    name: Deploy Consumer to Development
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.CONSUMER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.CONSUMER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Consumer Infrastructure (Dev)
      run: |
        cd cdk-consumer-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=dev --require-approval never

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev-provider, deploy-dev-consumer]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: staging
      url: https://staging.example.com
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_ACCESS_KEY_ID || secrets.CONSUMER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_SECRET_ACCESS_KEY || secrets.CONSUMER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Provider Infrastructure (Staging)
      if: matrix.account == 'provider'
      run: |
        cd cdk-provider-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=staging --require-approval never

    - name: Deploy Consumer Infrastructure (Staging)
      if: matrix.account == 'consumer'
      run: |
        cd cdk-consumer-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=staging --require-approval never

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://production.example.com
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_ACCESS_KEY_ID || secrets.CONSUMER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_SECRET_ACCESS_KEY || secrets.CONSUMER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Provider Infrastructure (Production)
      if: matrix.account == 'provider'
      run: |
        cd cdk-provider-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=prod --require-approval never

    - name: Deploy Consumer Infrastructure (Production)
      if: matrix.account == 'consumer'
      run: |
        cd cdk-consumer-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=prod --require-approval never
