name: Build and Deploy Microservice

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'microservice-repo/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'microservice-repo/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: microservice

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./microservice-repo
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "Image pushed with tags:"
        echo "${{ steps.meta.outputs.tags }}"

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        account: [networking, shared-services, provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', matrix.account)] }}
        aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', matrix.account)] }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      if: contains(matrix.account, 'networking') || contains(matrix.account, 'shared-services')
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.3

    - name: Setup Node.js
      if: contains(matrix.account, 'provider') || contains(matrix.account, 'consumer')
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Networking Infrastructure
      if: matrix.account == 'networking'
      run: |
        cd terraform-base-infra
        terraform init
        terraform plan
        terraform apply -auto-approve

    - name: Deploy Shared Services Infrastructure
      if: matrix.account == 'shared-services'
      run: |
        cd terraform-shared-services-account
        terraform init
        terraform plan
        terraform apply -auto-approve

    - name: Deploy Provider Infrastructure
      if: matrix.account == 'provider'
      run: |
        cd cdk-provider-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --require-approval never

    - name: Deploy Consumer Infrastructure
      if: matrix.account == 'consumer'
      run: |
        cd cdk-consumer-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --require-approval never
