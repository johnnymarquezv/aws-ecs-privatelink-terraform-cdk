name: Build and Deploy Microservice

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'microservice-repo/**'
      - 'cdk-provider-account/**'
      - 'cdk-consumer-account/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'microservice-repo/**'
      - 'cdk-provider-account/**'
      - 'cdk-consumer-account/**'

env:
  AWS_REGION: us-east-1
  GITHUB_REPOSITORY: johnnymarquezv/aws-ecs-privatelink-terraform-cdk
  CONTAINER_REGISTRY: ghcr.io

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.CONTAINER_REGISTRY }}/${{ env.GITHUB_REPOSITORY }}/microservice
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=dev,enable={{is_default_branch}}
          type=raw,value=staging,enable={{is_default_branch}}
          type=raw,value=prod,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./microservice-repo
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "Image pushed with tags:"
        echo "${{ steps.meta.outputs.tags }}"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: development
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', matrix.account)] }}
        aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', matrix.account)] }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Provider Infrastructure (Dev)
      if: matrix.account == 'provider'
      run: |
        cd cdk-provider-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=dev --require-approval never

    - name: Deploy Consumer Infrastructure (Dev)
      if: matrix.account == 'consumer'
      run: |
        cd cdk-consumer-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=dev --require-approval never

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', matrix.account)] }}
        aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', matrix.account)] }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Provider Infrastructure (Staging)
      if: matrix.account == 'provider'
      run: |
        cd cdk-provider-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=staging --require-approval never

    - name: Deploy Consumer Infrastructure (Staging)
      if: matrix.account == 'consumer'
      run: |
        cd cdk-consumer-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=staging --require-approval never

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', matrix.account)] }}
        aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', matrix.account)] }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Provider Infrastructure (Production)
      if: matrix.account == 'provider'
      run: |
        cd cdk-provider-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=prod --require-approval never

    - name: Deploy Consumer Infrastructure (Production)
      if: matrix.account == 'consumer'
      run: |
        cd cdk-consumer-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --context environment=prod --require-approval never
