name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  GITHUB_REPOSITORY: johnnymarquezv/aws-ecs-privatelink-terraform-cdk
  CONTAINER_REGISTRY: ghcr.io

jobs:
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Security Tools
      run: |
        # Install Python security tools
        pip install bandit[toml] safety
        
        # Install infrastructure security tools
        pip install checkov
        
        # Install Terrascan
        curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" -o terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan
        sudo mv terrascan /usr/local/bin/
        
        # Install tfsec
        curl -L "$(curl -s https://api.github.com/repos/aquasecurity/tfsec/releases/latest | grep -o -E "https://.+?_linux_amd64.tar.gz")" -o tfsec.tar.gz
        tar -xf tfsec.tar.gz tfsec
        sudo mv tfsec /usr/local/bin/
        
        # Install CDK Nag
        npm install -g cdk-nag

    - name: Run Trivy vulnerability scanner
      id: trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Run Semgrep SAST
      id: semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python
      continue-on-error: true

    - name: Initialize CodeQL
      id: codeql-init
      uses: github/codeql-action/init@v3
      with:
        languages: python
      continue-on-error: true

    - name: Run CodeQL Analysis
      id: codeql
      uses: github/codeql-action/analyze@v3
      continue-on-error: true

    - name: Run Bandit Python Security Linter
      id: bandit
      run: |
        bandit -r microservice/app/ -f json -o bandit-report.json || echo "Bandit scan completed with issues"
        bandit -r microservice/app/ -f txt || echo "Bandit scan completed with issues"
      continue-on-error: true

    - name: Run Safety for Python dependencies
      id: safety
      run: |
        safety scan --json --output safety-report.json || echo "Safety scan completed with issues"
        safety scan || echo "Safety scan completed with issues"
      continue-on-error: true

    - name: Run Infrastructure Security Scans
      id: infrastructure-scans
      run: |
        echo "Running Checkov on infrastructure files..."
        checkov -d terraform-base-infra/ --config-file .github/.checkov.yaml --output sarif --output-file-path checkov-base-infra.sarif || echo "Base infra scan completed with issues"
        checkov -d terraform-security-account/ --config-file .github/.checkov.yaml --output sarif --output-file-path checkov-security-account.sarif || echo "Security account scan completed with issues"
        checkov -d . --framework terraform --output sarif --output-file-path checkov-results.sarif --verbose || echo "General Terraform scan completed with issues"
        checkov -d . --framework cloudformation --output sarif --output-file-path checkov-cfn-results.sarif --verbose || echo "CloudFormation scan completed with issues"
        
        echo "Running tfsec on Terraform files..."
        tfsec terraform-base-infra/ --format sarif --out tfsec-base-infra.sarif || echo "Base infra scan completed with issues"
        tfsec terraform-security-account/ --format sarif --out tfsec-security-account.sarif || echo "Security account scan completed with issues"
        tfsec . --format sarif --out tfsec-results.sarif || echo "General scan completed with issues"
        
        echo "Running CDK Nag on CDK projects..."
        cd cdk-provider-account
        npm install
        cdk-nag --config ../.github/cdk-nag-config.json --output-format sarif --output-file-path ../cdk-nag-provider.sarif || echo "Provider CDK Nag scan completed with issues"
        cd ../cdk-consumer-account
        npm install
        cdk-nag --config ../.github/cdk-nag-config.json --output-format sarif --output-file-path ../cdk-nag-consumer.sarif || echo "Consumer CDK Nag scan completed with issues"
        cd ..
        
        echo "Running Terrascan on infrastructure files..."
        terrascan scan -d terraform-base-infra/ --config .github/terrascan-config.yaml --format sarif --output terrascan-base-infra.sarif || echo "Base infra scan completed with issues"
        terrascan scan -d terraform-security-account/ --config .github/terrascan-config.yaml --format sarif --output terrascan-security-account.sarif || echo "Security account scan completed with issues"
        terrascan scan -d . --format sarif --output terrascan-results.sarif || echo "General scan completed with issues"
        
        # Create minimal SARIF files if none were generated
        for file in checkov-base-infra.sarif checkov-security-account.sarif checkov-results.sarif checkov-cfn-results.sarif tfsec-base-infra.sarif tfsec-security-account.sarif tfsec-results.sarif cdk-nag-provider.sarif cdk-nag-consumer.sarif terrascan-base-infra.sarif terrascan-security-account.sarif terrascan-results.sarif; do
          if [ ! -f "$file" ]; then
            echo "Creating minimal SARIF file for $file..."
            tool_name=$(echo "$file" | cut -d'-' -f1 | tr '[:lower:]' '[:upper:]')
            echo "{\"\$schema\":\"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\"version\":\"2.1.0\",\"runs\":[{\"tool\":{\"driver\":{\"name\":\"$tool_name\",\"version\":\"2.0.0\"}},\"results\":[]}]}" > "$file"
          fi
        done
      continue-on-error: true

    # Upload SARIF results
    - name: Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: trivy-results.sarif
        category: trivy
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
        category: checkov-general
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload tfsec Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: tfsec-results.sarif
        category: tfsec-general
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload CDK Nag Provider Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: cdk-nag-provider.sarif
        category: cdk-nag-provider
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload CDK Nag Consumer Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: cdk-nag-consumer.sarif
        category: cdk-nag-consumer
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Terrascan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: terrascan-results.sarif
        category: terrascan-general
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Security Scan Summary
      if: always()
      run: |
        echo "## Security Scan Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Status | SARIF Uploaded |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|----------------|" >> $GITHUB_STEP_SUMMARY
        echo "| Trivy | ${{ steps.trivy.outcome }} | ${{ hashFiles('trivy-results.sarif') != '' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | ${{ steps.semgrep.outcome }} | No |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ steps.codeql.outcome }} | N/A |" >> $GITHUB_STEP_SUMMARY
        echo "| Bandit | ${{ steps.bandit.outcome }} | No |" >> $GITHUB_STEP_SUMMARY
        echo "| Safety | ${{ steps.safety.outcome }} | No |" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure Scans | ${{ steps.infrastructure-scans.outcome }} | Yes |" >> $GITHUB_STEP_SUMMARY

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.CONTAINER_REGISTRY }}/${{ env.GITHUB_REPOSITORY }}/microservice
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=dev,enable={{is_default_branch}}
          type=raw,value=staging,enable={{is_default_branch}}
          type=raw,value=prod,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./microservice
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "Image pushed with tags:"
        echo "${{ steps.meta.outputs.tags }}"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_ACCESS_KEY_ID || secrets.CONSUMER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_SECRET_ACCESS_KEY || secrets.CONSUMER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Infrastructure (Dev)
      run: |
        cd cdk-${{ matrix.account }}-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --require-approval never

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    environment: 
      name: staging
      url: https://staging.example.com
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_ACCESS_KEY_ID || secrets.CONSUMER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_SECRET_ACCESS_KEY || secrets.CONSUMER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Infrastructure (Staging)
      run: |
        cd cdk-${{ matrix.account }}-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --require-approval never

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://production.example.com
    
    strategy:
      matrix:
        account: [provider, consumer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_ACCESS_KEY_ID || secrets.CONSUMER_AWS_SECRET_ACCESS_KEY }}
        aws-secret-access-key: ${{ matrix.account == 'provider' && secrets.PROVIDER_AWS_SECRET_ACCESS_KEY || secrets.CONSUMER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Deploy Infrastructure (Production)
      run: |
        cd cdk-${{ matrix.account }}-account
        npm install
        npx cdk bootstrap
        npx cdk deploy --all --require-approval never